{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","Math","round","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","sys","setState","main","temp","weather","Title","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+PASeA,EAPA,kBACX,6BACI,wBAAIC,UAAY,0BAAhB,eACA,uBAAGA,UAAY,6BAAf,0CCKOC,EARF,SAAAC,GAAK,OACd,0BAAMC,SAAYD,EAAME,YACpB,2BAAOC,KAAO,OAAOC,KAAO,OAAOC,YAAc,YACjD,2BAAOF,KAAO,OAAOC,KAAO,UAAUC,YAAc,eACpD,mDCmCOC,EAvCC,SAACN,GAAD,OACd,yBAAKF,UAAU,iBAEbE,EAAMO,MAAQP,EAAMQ,SAClB,uBAAGV,UAAU,gBAAb,YAEE,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMO,KAAzC,IAAgDP,EAAMQ,UAI1DR,EAAMS,aACN,uBAAGX,UAAU,gBAAb,eAEI,0BAAMA,UAAU,kBAAhB,IAAmCY,KAAKC,MAAMX,EAAMS,eAIxDT,EAAMY,UACN,uBAAGd,UAAU,gBAAb,YAEI,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMY,WAI7CZ,EAAMa,aACN,uBAAGf,UAAU,gBAAb,cAEI,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMa,cAE3C,IAEFb,EAAMc,OACN,uBAAGhB,UAAU,kBACRE,EAAMc,SC7BTC,EAAU,mCAuEDC,E,4MAlEbC,MAAQ,CACNR,iBAAaS,EACbX,UAAMW,EACNV,aAASU,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAIThB,W,uCAAa,WAAOiB,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACEd,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,MAC9BhB,EAAUW,EAAEG,OAAOC,SAASf,QAAQgB,MAH7B,SAIYC,MAAM,oDAAD,OAAqDlB,EAArD,YAA6DC,EAA7D,kBAA8EO,EAA9E,kBAJjB,cAILW,EAJK,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAMXC,QAAQC,IAAIF,GACRA,EAAKxB,MAAQwB,EAAKG,IAAIvB,QACxB,EAAKwB,SAAS,CACZvB,YAAamB,EAAKK,KAAKC,KACvB3B,KAAMqB,EAAKxB,KACXI,QAASoB,EAAKG,IAAIvB,QAClBI,SAAUgB,EAAKK,KAAKrB,SACpBC,YAAae,EAAKO,QAAQ,GAAGtB,YAC7BC,MAAO,KAKT,EAAKkB,SAAS,CACZvB,iBAAaS,EACbX,UAAMW,EACNV,aAASU,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,qCAzBA,4C,6GA+BX,OACE,6BACA,yBAAKhB,UAAU,WACb,yBAAKA,UAAU,QACT,yBAAKA,UAAU,4BACb,kBAACsC,EAAD,OAEA,yBAAKtC,UAAU,2BACX,kBAAC,EAAD,CAAMI,WAAcmC,KAAKnC,aACzB,kBAAC,EAAD,CACEO,YAAe4B,KAAKpB,MAAMR,YAC1BF,KAAQ8B,KAAKpB,MAAMV,KACnBC,QAAW6B,KAAKpB,MAAMT,QACtBI,SAAYyB,KAAKpB,MAAML,SACvBC,YAAewB,KAAKpB,MAAMJ,YAC1BC,MAASuB,KAAKpB,MAAMH,gB,GA1DxBwB,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLe,QAAQf,MAAMA,EAAM2C,a","file":"static/js/main.8b67f6bb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className = \"title-container__title\">Weather App</h1>\r\n        <p className = \"title-container__subtitle\">Find out weather conditions outside.</p>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit = {props.getWeather}>\r\n        <input type = \"text\" name = \"city\" placeholder = \"City...\"/>\r\n        <input type = \"text\" name = \"country\" placeholder = \"Country...\"/>\r\n        <button> Get Weather </button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = (props) => (\r\n  <div className=\"weather__info\">\r\n    {\r\n    props.city && props.country && (\r\n      <p className=\"weather__key\">\r\n        Location: \r\n        <span className=\"weather__value\"> {props.city},{props.country}</span>\r\n      </p>\r\n    )}\r\n    {\r\n    props.temperature && \r\n    <p className=\"weather__key\">\r\n        temperature: \r\n        <span className=\"weather__value\"> {Math.round(props.temperature)}</span>\r\n    </p>\r\n    }\r\n    {\r\n    props.humidity && \r\n    <p className=\"weather__key\">\r\n        Humidity: \r\n        <span className=\"weather__value\"> {props.humidity}</span>\r\n    </p>\r\n    }\r\n    {\r\n    props.description && \r\n    <p className=\"weather__key\">\r\n        Conditions: \r\n        <span className=\"weather__value\"> {props.description}</span>\r\n    </p>\r\n    }{\" \"}\r\n    {\r\n    props.error && \r\n    <p className=\"weather__error\">\r\n        {props.error}\r\n    </p>\r\n    }\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\n\nimport Title from \"./components/Title\"\nimport Form from \"./components/Form\"\nimport Weather from \"./components/Weather\"\n\nconst API_KEY = \"a2b6fcd38dafb5cebe5e38cc8b1bf4a0\";\n\n\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n\n  }\n  \n  getWeather = async (e) => {\n    e.preventDefault();\n    let city = e.target.elements.city.value;\n    let country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    console.log(data)\n    if (data.name && data.sys.country){\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n\n      });\n    }else{\n\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter a city and country.\"\n      });\n    }\n  }\n\n  render(){\n    return(\n      <div>\n      <div className=\"wrapper\">\n        <div className=\"main\">\n              <div className=\"col-xs-5 title-container\">\n                <Title />\n              </div>\n                <div className=\"col-xs-7 form-container\">\n                    <Form getWeather = {this.getWeather}/>\n                    <Weather\n                      temperature = {this.state.temperature}\n                      city = {this.state.city}\n                      country = {this.state.country}\n                      humidity = {this.state.humidity}\n                      description = {this.state.description}\n                      error = {this.state.error}\n                  />\n              </div>\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport  './App.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}